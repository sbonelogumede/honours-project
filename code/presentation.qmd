---
title: 'Gaussian Processes for Time Series Modelling'
author:
  - 'Azar Raphaela'
  - 'Gumede Sbonelo'
institute:  
  - 'University of Cape Town'
  - 'Supervisor: Dr. Birgit Erni'
date: today
format: beamer
---

```{r Setup}
#| echo: FALSE
#| include: FALSE

packs = c('dplyr', 'forecast', 'fpp2', 'ggfortify', 'ggplot2', 'knitr', 
			 'splines', 'rstan')

for(pack in packs){
	if(!requireNamespace(pack, quietly=TRUE)){
		install.packages(pack, quiet=TRUE)
	}
	library(pack, character.only=TRUE)
}
```

## Plot of the dataset

```{r EDA}
#| echo: FALSE

df <- EuStockMarkets[, 'FTSE'] # Load data

autoplot(df) +
	labs(title='Daily Closing Prices of FTSE (1991-1998)',
		  x='Time',
		  y='FTSE') + 
	theme_minimal()
```

## Moving average smooting

```{r CMA}
#| echo: FALSE

autoplot(df) +
	autolayer(ma(df,365), series='MA 365', size=1.5) +
	scale_color_manual(values=c('MA 365' = 'firebrick')) +
	labs(title='Daily Closing Prices of FTSE (1991-1998)',
		  x='Time',
		  y='FTSE',
		  color='Legend') + 
	theme_minimal() +
	theme(legend.text = element_text(size = 14), 
			legend.title = element_text(size = 16))
```

## Discussion

There are infinite models that we could use. However, since we picked up the trend 
using CMA(k=365) we can make an inspired guess. 
A second degree polynomial spline seems to be appropriate.

## Partition

```{r Partition}
#| echo: FALSE

n <- length(df) # Number of observations in the data
train_end_index <- floor(0.7 * n) # (70/30)% split of the data

train <- window(df, end = time(df)[train_end_index]) # Training data
test <- window(df, start = time(df)[train_end_index + 1]) # Testing data

# Plot the train vs test set
autoplot(df) +
	autolayer(train, series='Train', size=1.5) +
	autolayer(test, series='Test', size=1.5) +
	scale_color_manual(values=c('Train'='lightskyblue', 'Test'='darkorange')) +
	labs(title='Daily Closing Prices of FTSE (1991-1998)',
		  x='Time',
		  y='FTSE',
		  color='Legend') + 
	theme_minimal() +
	theme(legend.text = element_text(size = 14), 
			legend.title = element_text(size = 16))
```

## B-splines

### Base case

$$
B_{i, 0}(t) := 
\begin{cases} 
	1, & \text{if } t_{i} \leq t < t_{i+1} \\
	0, & \text{otherwise}
\end{cases}
$$

### Recursive step

$$
B_{i,p}(t) := 
\frac{t - t_{i}}{t_{i+p} - t_{i}} B_{i, p-1}(t) 
+ \frac{t_{i+p+1}-t}{t_{i+p+1}-t_{i+1}} B_{i+1, p-1}(t)
$$

#### Where

$t$ is the covariate and $p$ is the degree of the polynomial.

## B-spline of order 2 fit

```{r Spline}
#| echo: FALSE

train_time <- as.numeric(time(train)) # Extract the time component for training data
test_time <- as.numeric(time(test)) # Extract the time component for testing data

fit <- lm(train ~ bs(train_time, df = 2)) # Fit a spline model of degree 2

train_preds <- predict(fit, newdata=data.frame(train_time=train_time)) # Spline on training data
test_preds <- predict(fit, newdata=data.frame(train_time=test_time)) # Extrapolate

train_ts <- ts(train_preds, start=start(train), frequency=frequency(train)) # Convert to ts
test_ts <- ts(test_preds, start=start(test), frequency=frequency(test)) # Convert to ts

autoplot(df) +
	autolayer(train_ts, series='Train Spline', size=1.5) +
	autolayer(test_ts, series='Test Spline', size=1.5) +
	scale_color_manual(values=c('Train Spline'='lightskyblue', 
										 'Test Spline'='darkorange')) +
	labs(title='Daily Closing Prices of FTSE (1991-1998)',
		  x='Time',
		  y='FTSE',
		  color='Legend') + 
	theme_minimal() +
	theme(legend.text = element_text(size = 14), 
			legend.title = element_text(size = 16))
```

## Discussion

### Problem

Robust use of the polynomial model requires knowledge of how the coefficients 
interact to control functional behaviour, 
which becomes unmanageable as the order of the polynomial grows.

### Solution

A Gaussian Process defines a probability distribution over functions; in other words, 
it is an entire function from the covariate space to the real-valued output space.

## Gaussian process

A time continuous stochastic process $\{X_{t}; \ t \in T\}$ is Gaussian 
if and only if for every finite set of indices $t_{1},...,t_{k}$ in the index set $T$

$$\mathbf{X}_{t_{1},...,t_{k}} = (X_{t_{1}},...,X_{t_{k}})$$ 

is a multivariate Gaussian random variable.

```{r GP}
#| echo: FALSE
#| warning: FALSE

rstan_options(auto_write=TRUE)
options(mc.cores=parallel::detectCores())
parallel:::setDefaultClusterOptions(setup_strategy='sequential')

util <- new.env()

par(family='serif', las=1, bty='l', cex.axis=1, cex.lab=1,
	 cex.main=1, xaxs='i', yaxs='i', mar=c(5, 5, 3, 5))

# Gram grid
x <- 22 * (0:(n-1)) / (n-1) - 11

# Parameters that specify our GP
alpha_true <- 3
rho_true <- 5.5
sigma_true <- 2

# Pack everything together
simu_data <- list(alpha=alpha_true, rho=rho_true, sigma=sigma_true, 
						N=n, x=x)

# Sample from the MVN(0, Gram-matrix)
simu_fit <- stan(file='stan_programs/presentation.stan', 
					  data=simu_data, warmup=0, iter=4000, chains=1, 
					  seed=494838, algorithm='Fixed_param', refresh=0, 
					  verbose=FALSE)

# Visualization code
source('gp_utility.R', local=util)
```

## Prior realizations

```{r PR}
#| echo: FALSE
#| warning: FALSE

util$plot_gp_prior_realizations(simu_fit, x, 'Prior realizations')
```

## Prior quantiles

```{r PQ}
#| echo: FALSE
#| warning: FALSE

util$plot_gp_prior_quantiles(simu_fit, x, 'Prior quantiles')
```
